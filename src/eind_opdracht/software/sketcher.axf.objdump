
D:/Desktop/HPS/sketcher.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 84 0d 00 00 88 0d 00 00 8c 0d 00 00     @...............
  30:	90 0d 00 00 80 0d 00 00 94 0d 00 00 98 0d 00 00     ................

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb000310 	bl	d1c <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000e80 	.word	0x00000e80

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00001378 	.word	0x00001378

00000124 <__cs3_heap_start_ptr>:
 124:	000013a0 	.word	0x000013a0

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00001380 	.word	0x00001380
 170:	00001383 	.word	0x00001383
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00001380 	.word	0x00001380
 1bc:	00001380 	.word	0x00001380
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00001380 	.word	0x00001380
 200:	00000000 	.word	0x00000000
 204:	00000e24 	.word	0x00000e24

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000e24 	.word	0x00000e24
 250:	00001384 	.word	0x00001384
 254:	00000e80 	.word	0x00000e80
 258:	00000000 	.word	0x00000000

0000025c <find_next_top>:

//This function is meant for rotating the top half of the hex display
//the current position and switch values are passed to the function
//and the next position in rotation is returned 
struct pos find_next_top(struct pos nexus_pos, _Bool SW)
{
 25c:	e24dd008 	sub	sp, sp, #8
 260:	e28d3008 	add	r3, sp, #8
 264:	e9030006 	stmdb	r3, {r1, r2}
    struct pos temp_pos;

    for (int i = 0; i < 4; i++)
    {
        if (ro_top[i] == moves[nexus_pos.x][nexus_pos.y])
 268:	e3003e88 	movw	r3, #3720	; 0xe88
 26c:	e3403000 	movt	r3, #0
 270:	e59d2000 	ldr	r2, [sp]
 274:	e0822082 	add	r2, r2, r2, lsl #1
 278:	e59d1004 	ldr	r1, [sp, #4]
 27c:	e0822001 	add	r2, r2, r1
 280:	e7932102 	ldr	r2, [r3, r2, lsl #2]
 284:	e5933024 	ldr	r3, [r3, #36]	; 0x24
 288:	e1530002 	cmp	r3, r2
 28c:	0a000012 	beq	2dc <find_next_top+0x80>
 290:	e3003e88 	movw	r3, #3720	; 0xe88
 294:	e3403000 	movt	r3, #0
 298:	e5933028 	ldr	r3, [r3, #40]	; 0x28
 29c:	e1530002 	cmp	r3, r2
 2a0:	0a000017 	beq	304 <find_next_top+0xa8>
 2a4:	e3003e88 	movw	r3, #3720	; 0xe88
 2a8:	e3403000 	movt	r3, #0
 2ac:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
 2b0:	e1530002 	cmp	r3, r2
 2b4:	0a000014 	beq	30c <find_next_top+0xb0>
 2b8:	e3003e88 	movw	r3, #3720	; 0xe88
 2bc:	e3403000 	movt	r3, #0
 2c0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
 2c4:	e1530002 	cmp	r3, r2
                temp_pos.y = bro_top[0].y;
            }
            return temp_pos;
        }
    }
    return temp_pos;
 2c8:	13a03000 	movne	r3, #0
 2cc:	15803000 	strne	r3, [r0]
 2d0:	15803004 	strne	r3, [r0, #4]
{
    struct pos temp_pos;

    for (int i = 0; i < 4; i++)
    {
        if (ro_top[i] == moves[nexus_pos.x][nexus_pos.y])
 2d4:	1a000013 	bne	328 <find_next_top+0xcc>
 2d8:	ea00000d 	b	314 <find_next_top+0xb8>
//and the next position in rotation is returned 
struct pos find_next_top(struct pos nexus_pos, _Bool SW)
{
    struct pos temp_pos;

    for (int i = 0; i < 4; i++)
 2dc:	e3a03000 	mov	r3, #0
    {
        if (ro_top[i] == moves[nexus_pos.x][nexus_pos.y])
        {
            if (i < 3)
            {
                temp_pos.x = bro_top[i + 1].x;
 2e0:	e2832001 	add	r2, r3, #1
 2e4:	e3003e88 	movw	r3, #3720	; 0xe88
 2e8:	e3403000 	movt	r3, #0
 2ec:	e0833182 	add	r3, r3, r2, lsl #3
 2f0:	e5932034 	ldr	r2, [r3, #52]	; 0x34
                temp_pos.y = bro_top[i + 1].y;
 2f4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
            else
            {
                temp_pos.x = bro_top[0].x;
                temp_pos.y = bro_top[0].y;
            }
            return temp_pos;
 2f8:	e5802000 	str	r2, [r0]
 2fc:	e5803004 	str	r3, [r0, #4]
 300:	ea000008 	b	328 <find_next_top+0xcc>
//and the next position in rotation is returned 
struct pos find_next_top(struct pos nexus_pos, _Bool SW)
{
    struct pos temp_pos;

    for (int i = 0; i < 4; i++)
 304:	e3a03001 	mov	r3, #1
 308:	eafffff4 	b	2e0 <find_next_top+0x84>
 30c:	e3a03002 	mov	r3, #2
 310:	eafffff2 	b	2e0 <find_next_top+0x84>
                temp_pos.x = bro_top[i + 1].x;
                temp_pos.y = bro_top[i + 1].y;
            }
            else
            {
                temp_pos.x = bro_top[0].x;
 314:	e3003e88 	movw	r3, #3720	; 0xe88
 318:	e3403000 	movt	r3, #0
 31c:	e5932034 	ldr	r2, [r3, #52]	; 0x34
                temp_pos.y = bro_top[0].y;
 320:	e5933038 	ldr	r3, [r3, #56]	; 0x38
 324:	eafffff3 	b	2f8 <find_next_top+0x9c>
            }
            return temp_pos;
        }
    }
    return temp_pos;
}
 328:	e28dd008 	add	sp, sp, #8
 32c:	e12fff1e 	bx	lr

00000330 <find_next_bot>:

//Same as find_next_top but for the bottem
struct pos find_next_bot(struct pos nexus_pos, _Bool SW)
{
 330:	e24dd008 	sub	sp, sp, #8
 334:	e28d3008 	add	r3, sp, #8
 338:	e9030006 	stmdb	r3, {r1, r2}
    struct pos temp_pos;

    for (int i = 0; i < 4; i++)
    {
        if (ro_bot[i] == moves[nexus_pos.x][nexus_pos.y])
 33c:	e3003e88 	movw	r3, #3720	; 0xe88
 340:	e3403000 	movt	r3, #0
 344:	e59d2000 	ldr	r2, [sp]
 348:	e0822082 	add	r2, r2, r2, lsl #1
 34c:	e59d1004 	ldr	r1, [sp, #4]
 350:	e0822001 	add	r2, r2, r1
 354:	e7932102 	ldr	r2, [r3, r2, lsl #2]
 358:	e5933054 	ldr	r3, [r3, #84]	; 0x54
 35c:	e1530002 	cmp	r3, r2
 360:	0a000012 	beq	3b0 <find_next_bot+0x80>
 364:	e3003e88 	movw	r3, #3720	; 0xe88
 368:	e3403000 	movt	r3, #0
 36c:	e5933058 	ldr	r3, [r3, #88]	; 0x58
 370:	e1530002 	cmp	r3, r2
 374:	0a000017 	beq	3d8 <find_next_bot+0xa8>
 378:	e3003e88 	movw	r3, #3720	; 0xe88
 37c:	e3403000 	movt	r3, #0
 380:	e593305c 	ldr	r3, [r3, #92]	; 0x5c
 384:	e1530002 	cmp	r3, r2
 388:	0a000014 	beq	3e0 <find_next_bot+0xb0>
 38c:	e3003e88 	movw	r3, #3720	; 0xe88
 390:	e3403000 	movt	r3, #0
 394:	e5933060 	ldr	r3, [r3, #96]	; 0x60
 398:	e1530002 	cmp	r3, r2
                temp_pos.y = bro_bot[0].y;
            }
            return temp_pos;
        }
    }
    return temp_pos;
 39c:	13a03000 	movne	r3, #0
 3a0:	15803000 	strne	r3, [r0]
 3a4:	15803004 	strne	r3, [r0, #4]
{
    struct pos temp_pos;

    for (int i = 0; i < 4; i++)
    {
        if (ro_bot[i] == moves[nexus_pos.x][nexus_pos.y])
 3a8:	1a000013 	bne	3fc <find_next_bot+0xcc>
 3ac:	ea00000d 	b	3e8 <find_next_bot+0xb8>
//Same as find_next_top but for the bottem
struct pos find_next_bot(struct pos nexus_pos, _Bool SW)
{
    struct pos temp_pos;

    for (int i = 0; i < 4; i++)
 3b0:	e3a03000 	mov	r3, #0
    {
        if (ro_bot[i] == moves[nexus_pos.x][nexus_pos.y])
        {
            if (i < 3)
            {
                temp_pos.x = bro_bot[i + 1].x;
 3b4:	e2832001 	add	r2, r3, #1
 3b8:	e3003e88 	movw	r3, #3720	; 0xe88
 3bc:	e3403000 	movt	r3, #0
 3c0:	e0833182 	add	r3, r3, r2, lsl #3
 3c4:	e5932064 	ldr	r2, [r3, #100]	; 0x64
                temp_pos.y = bro_bot[i + 1].y;
 3c8:	e5933068 	ldr	r3, [r3, #104]	; 0x68
            else
            {
                temp_pos.x = bro_bot[0].x;
                temp_pos.y = bro_bot[0].y;
            }
            return temp_pos;
 3cc:	e5802000 	str	r2, [r0]
 3d0:	e5803004 	str	r3, [r0, #4]
 3d4:	ea000008 	b	3fc <find_next_bot+0xcc>
//Same as find_next_top but for the bottem
struct pos find_next_bot(struct pos nexus_pos, _Bool SW)
{
    struct pos temp_pos;

    for (int i = 0; i < 4; i++)
 3d8:	e3a03001 	mov	r3, #1
 3dc:	eafffff4 	b	3b4 <find_next_bot+0x84>
 3e0:	e3a03002 	mov	r3, #2
 3e4:	eafffff2 	b	3b4 <find_next_bot+0x84>
                temp_pos.x = bro_bot[i + 1].x;
                temp_pos.y = bro_bot[i + 1].y;
            }
            else
            {
                temp_pos.x = bro_bot[0].x;
 3e8:	e3003e88 	movw	r3, #3720	; 0xe88
 3ec:	e3403000 	movt	r3, #0
 3f0:	e5932064 	ldr	r2, [r3, #100]	; 0x64
                temp_pos.y = bro_bot[0].y;
 3f4:	e5933068 	ldr	r3, [r3, #104]	; 0x68
 3f8:	eafffff3 	b	3cc <find_next_bot+0x9c>
            }
            return temp_pos;
        }
    }
    return temp_pos;
}
 3fc:	e28dd008 	add	sp, sp, #8
 400:	e12fff1e 	bx	lr

00000404 <move_index>:
//move_index is used to handle the inputs given
//as parameters it is passed the current index which is the position of de indicated LED strip in a 32bit variable,
//mov, which is the selected type of operation for the index
//and finally the switch value is passed to determine the direction of the operation
int move_index(int index, enum move mov, _Bool SW)
{
 404:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 408:	e24dd010 	sub	sp, sp, #16
 40c:	e1a05000 	mov	r5, r0
    //new_index is the position of the LED independent of the current display in which it finds itself
    struct pos temp_pos, nexus_pos;
    int move_hex = 0;
    int new_index = index % 8;
 410:	e1a00fc0 	asr	r0, r0, #31
 414:	e1a00ea0 	lsr	r0, r0, #29
 418:	e0853000 	add	r3, r5, r0
 41c:	e2033007 	and	r3, r3, #7
 420:	e0600003 	rsb	r0, r0, r3

    //A position inside the matrix is determined based on the new_index which was just created.
    //2 are made so the default value can be referenced for later uses
    temp_pos.x = matrix[new_index].x;
 424:	e3003e88 	movw	r3, #3720	; 0xe88
 428:	e3403000 	movt	r3, #0
 42c:	e0833180 	add	r3, r3, r0, lsl #3
 430:	e5936084 	ldr	r6, [r3, #132]	; 0x84
    temp_pos.y = matrix[new_index].y;
 434:	e5934088 	ldr	r4, [r3, #136]	; 0x88
    nexus_pos.x = matrix[new_index].x;
    nexus_pos.y = matrix[new_index].y;

    //switch through the mov operations
    switch (mov)
 438:	e3510001 	cmp	r1, #1
 43c:	0a000015 	beq	498 <move_index+0x94>
 440:	3a000002 	bcc	450 <move_index+0x4c>
 444:	e3510002 	cmp	r1, #2
 448:	1a0000e2 	bne	7d8 <move_index+0x3d4>
 44c:	ea000033 	b	520 <move_index+0x11c>
    case horizontal:
    {
        //if the current position is in the middle of the matrix, a horizontal movement
        //will always result in switching of the hex display. 
        //move_hex is a variable which keeps track of this movement
        if (temp_pos.x == 1){
 450:	e3560001 	cmp	r6, #1
 454:	1a000003 	bne	468 <move_index+0x64>
            if (SW){
 458:	e3520000 	cmp	r2, #0
    int move_hex = 0;
    int new_index = index % 8;

    //A position inside the matrix is determined based on the new_index which was just created.
    //2 are made so the default value can be referenced for later uses
    temp_pos.x = matrix[new_index].x;
 45c:	01a01006 	moveq	r1, r6
    {
        //if the current position is in the middle of the matrix, a horizontal movement
        //will always result in switching of the hex display. 
        //move_hex is a variable which keeps track of this movement
        if (temp_pos.x == 1){
            if (SW){
 460:	0a000106 	beq	880 <move_index+0x47c>
 464:	ea0000fc 	b	85c <move_index+0x458>

        //for horizontal movement on de outside LED's of the displays, first switching between the internal sides needs to occur
        //if it already finds itself on the outside of its movement, the sides need to be switched and move_hex adjusted
        //to switch between displays
        else{
            if (SW){
 468:	e3520000 	cmp	r2, #0
 46c:	0a000004 	beq	484 <move_index+0x80>
                if (temp_pos.x == 2){
 470:	e3560002 	cmp	r6, #2
 474:	0a000100 	beq	87c <move_index+0x478>
    //A position inside the matrix is determined based on the new_index which was just created.
    //2 are made so the default value can be referenced for later uses
    temp_pos.x = matrix[new_index].x;
    temp_pos.y = matrix[new_index].y;
    nexus_pos.x = matrix[new_index].x;
    nexus_pos.y = matrix[new_index].y;
 478:	e1a02004 	mov	r2, r4
            if (SW){
                if (temp_pos.x == 2){
                    temp_pos.x = 0;
                    move_hex--;
                }else{
                    temp_pos.x = 2;
 47c:	e3a01002 	mov	r1, #2
 480:	ea0000db 	b	7f4 <move_index+0x3f0>
                }
                break;
            }else{
                if (temp_pos.x == 0){
 484:	e3560000 	cmp	r6, #0
    //A position inside the matrix is determined based on the new_index which was just created.
    //2 are made so the default value can be referenced for later uses
    temp_pos.x = matrix[new_index].x;
    temp_pos.y = matrix[new_index].y;
    nexus_pos.x = matrix[new_index].x;
    nexus_pos.y = matrix[new_index].y;
 488:	11a02004 	movne	r2, r4
            }else{
                if (temp_pos.x == 0){
                    temp_pos.x = 2;
                    move_hex++;
                }else{
                    temp_pos.x = 0;
 48c:	13a01000 	movne	r1, #0
                }else{
                    temp_pos.x = 2;
                }
                break;
            }else{
                if (temp_pos.x == 0){
 490:	1a0000d7 	bne	7f4 <move_index+0x3f0>
 494:	ea0000f2 	b	864 <move_index+0x460>
    {   
        //switching verticaly when the LED's position is in the middel section of the matrix,
        //means swiching between the 3 layers in the switch selected direction
        //when the end of either side is reached and a next step in the same direction would exceed the ending
        //the position is switched to that of the opposite end.
        if (nexus_pos.x == 1){
 498:	e3560001 	cmp	r6, #1
 49c:	1a00000d 	bne	4d8 <move_index+0xd4>
            if (SW){
 4a0:	e3520000 	cmp	r2, #0
 4a4:	0a000005 	beq	4c0 <move_index+0xbc>
                if (temp_pos.y == 0){
 4a8:	e3540000 	cmp	r4, #0
 4ac:	0a0000db 	beq	820 <move_index+0x41c>
    //A position inside the matrix is determined based on the new_index which was just created.
    //2 are made so the default value can be referenced for later uses
    temp_pos.x = matrix[new_index].x;
    temp_pos.y = matrix[new_index].y;
    nexus_pos.x = matrix[new_index].x;
    nexus_pos.y = matrix[new_index].y;
 4b0:	e1a02004 	mov	r2, r4
        if (nexus_pos.x == 1){
            if (SW){
                if (temp_pos.y == 0){
                    temp_pos.y = 2;
                }else{
                    temp_pos.y--;
 4b4:	e2444001 	sub	r4, r4, #1
    int move_hex = 0;
    int new_index = index % 8;

    //A position inside the matrix is determined based on the new_index which was just created.
    //2 are made so the default value can be referenced for later uses
    temp_pos.x = matrix[new_index].x;
 4b8:	e1a01006 	mov	r1, r6
 4bc:	ea0000cc 	b	7f4 <move_index+0x3f0>
                    temp_pos.y = 2;
                }else{
                    temp_pos.y--;
                }
            }else{
                if (temp_pos.y == 2){
 4c0:	e3540002 	cmp	r4, #2
 4c4:	0a0000d9 	beq	830 <move_index+0x42c>
    //A position inside the matrix is determined based on the new_index which was just created.
    //2 are made so the default value can be referenced for later uses
    temp_pos.x = matrix[new_index].x;
    temp_pos.y = matrix[new_index].y;
    nexus_pos.x = matrix[new_index].x;
    nexus_pos.y = matrix[new_index].y;
 4c8:	e1a02004 	mov	r2, r4
                }
            }else{
                if (temp_pos.y == 2){
                    temp_pos.y = 0;
                }else{
                    temp_pos.y++;
 4cc:	e2844001 	add	r4, r4, #1
    int move_hex = 0;
    int new_index = index % 8;

    //A position inside the matrix is determined based on the new_index which was just created.
    //2 are made so the default value can be referenced for later uses
    temp_pos.x = matrix[new_index].x;
 4d0:	e1a01006 	mov	r1, r6
 4d4:	ea0000c6 	b	7f4 <move_index+0x3f0>
                }
            }
            break;
        }
        //switching on the edge is just switching between the 2 LED's
        else if (nexus_pos.x == 0 || nexus_pos.x == 2){
 4d8:	e3d63002 	bics	r3, r6, #2
    //A position inside the matrix is determined based on the new_index which was just created.
    //2 are made so the default value can be referenced for later uses
    temp_pos.x = matrix[new_index].x;
    temp_pos.y = matrix[new_index].y;
    nexus_pos.x = matrix[new_index].x;
    nexus_pos.y = matrix[new_index].y;
 4dc:	11a02004 	movne	r2, r4
    int move_hex = 0;
    int new_index = index % 8;

    //A position inside the matrix is determined based on the new_index which was just created.
    //2 are made so the default value can be referenced for later uses
    temp_pos.x = matrix[new_index].x;
 4e0:	11a01006 	movne	r1, r6
                }
            }
            break;
        }
        //switching on the edge is just switching between the 2 LED's
        else if (nexus_pos.x == 0 || nexus_pos.x == 2){
 4e4:	1a0000c2 	bne	7f4 <move_index+0x3f0>
            if (SW){
 4e8:	e3520000 	cmp	r2, #0
 4ec:	0a000005 	beq	508 <move_index+0x104>
                if (nexus_pos.y == 1){
 4f0:	e3540001 	cmp	r4, #1
    int move_hex = 0;
    int new_index = index % 8;

    //A position inside the matrix is determined based on the new_index which was just created.
    //2 are made so the default value can be referenced for later uses
    temp_pos.x = matrix[new_index].x;
 4f4:	01a01006 	moveq	r1, r6
    temp_pos.y = matrix[new_index].y;
    nexus_pos.x = matrix[new_index].x;
    nexus_pos.y = matrix[new_index].y;
 4f8:	03a02001 	moveq	r2, #1
        }
        //switching on the edge is just switching between the 2 LED's
        else if (nexus_pos.x == 0 || nexus_pos.x == 2){
            if (SW){
                if (nexus_pos.y == 1){
                    temp_pos.y = 2;
 4fc:	03a04002 	moveq	r4, #2
            break;
        }
        //switching on the edge is just switching between the 2 LED's
        else if (nexus_pos.x == 0 || nexus_pos.x == 2){
            if (SW){
                if (nexus_pos.y == 1){
 500:	0a0000bb 	beq	7f4 <move_index+0x3f0>
 504:	ea0000cd 	b	840 <move_index+0x43c>
                    temp_pos.y = 2;
                }else{
                    nexus_pos.y = 1;
                }
            }else{
                if (nexus_pos.y == 2){
 508:	e3540002 	cmp	r4, #2
    int move_hex = 0;
    int new_index = index % 8;

    //A position inside the matrix is determined based on the new_index which was just created.
    //2 are made so the default value can be referenced for later uses
    temp_pos.x = matrix[new_index].x;
 50c:	01a01006 	moveq	r1, r6
    temp_pos.y = matrix[new_index].y;
    nexus_pos.x = matrix[new_index].x;
    nexus_pos.y = matrix[new_index].y;
 510:	03a02002 	moveq	r2, #2
                }else{
                    nexus_pos.y = 1;
                }
            }else{
                if (nexus_pos.y == 2){
                    temp_pos.y = 1;
 514:	03a04001 	moveq	r4, #1
                    temp_pos.y = 2;
                }else{
                    nexus_pos.y = 1;
                }
            }else{
                if (nexus_pos.y == 2){
 518:	0a0000b5 	beq	7f4 <move_index+0x3f0>
 51c:	ea0000ca 	b	84c <move_index+0x448>
    //rotation is currently kinda skuffed and only works on some locations, not all due to time conflict
    case rotate:
    {
        //at the top of handeling the rotation of the LED, first is determine if it is relevant to switch the current half
        //on which the LED resides
        if (moves[temp_pos.x][temp_pos.y] == 2 || moves[temp_pos.x][temp_pos.y] == 4)
 520:	e3003e88 	movw	r3, #3720	; 0xe88
 524:	e3403000 	movt	r3, #0
 528:	e0861086 	add	r1, r6, r6, lsl #1
 52c:	e0811004 	add	r1, r1, r4
 530:	e7933101 	ldr	r3, [r3, r1, lsl #2]
 534:	e3530002 	cmp	r3, #2
 538:	13530004 	cmpne	r3, #4
        {
            location = bot;
 53c:	0301139c 	movweq	r1, #5020	; 0x139c
 540:	03401000 	movteq	r1, #0
 544:	03a00001 	moveq	r0, #1
 548:	05c10000 	strbeq	r0, [r1]
        }
        if (moves[temp_pos.x][temp_pos.y] == 5 || moves[temp_pos.x][temp_pos.y] == 1)
 54c:	e3c31004 	bic	r1, r3, #4
 550:	e3510001 	cmp	r1, #1
        {
            location = top;
 554:	0301139c 	movweq	r1, #5020	; 0x139c
 558:	03401000 	movteq	r1, #0
 55c:	03a00000 	moveq	r0, #0
 560:	05c10000 	strbeq	r0, [r1]


        //rotation is handled based on the current position an switch position.
        //the switch cases inside rotation are used to determine which have needs to be used for rotating.
        // after that find_next_bot or find_next_top are used to change the position
        if (SW)
 564:	e3520000 	cmp	r2, #0
 568:	0a00004b 	beq	69c <move_index+0x298>
        {
            switch (moves[temp_pos.x][temp_pos.y])
 56c:	e3530006 	cmp	r3, #6
 570:	8a000098 	bhi	7d8 <move_index+0x3d4>
 574:	e3a02331 	mov	r2, #-1006632960	; 0xc4000000
 578:	e1b02312 	lsls	r2, r2, r3
 57c:	4a000010 	bmi	5c4 <move_index+0x1c0>
 580:	e3a02402 	mov	r2, #33554432	; 0x2000000
 584:	e1b02312 	lsls	r2, r2, r3
 588:	4a00001b 	bmi	5fc <move_index+0x1f8>
 58c:	e3a0230e 	mov	r2, #939524096	; 0x38000000
 590:	e1b02312 	lsls	r2, r2, r3
 594:	5a00008f 	bpl	7d8 <move_index+0x3d4>
            {
            case 2:
            case 3:
            case 4:
                temp_pos = find_next_bot(temp_pos, SW);
 598:	e58d6008 	str	r6, [sp, #8]
 59c:	e58d400c 	str	r4, [sp, #12]
 5a0:	e28d3008 	add	r3, sp, #8
 5a4:	e1a00003 	mov	r0, r3
 5a8:	e8930006 	ldm	r3, {r1, r2}
 5ac:	e3a03001 	mov	r3, #1
 5b0:	ebffff5e 	bl	330 <find_next_bot>
    //A position inside the matrix is determined based on the new_index which was just created.
    //2 are made so the default value can be referenced for later uses
    temp_pos.x = matrix[new_index].x;
    temp_pos.y = matrix[new_index].y;
    nexus_pos.x = matrix[new_index].x;
    nexus_pos.y = matrix[new_index].y;
 5b4:	e1a02004 	mov	r2, r4
            switch (moves[temp_pos.x][temp_pos.y])
            {
            case 2:
            case 3:
            case 4:
                temp_pos = find_next_bot(temp_pos, SW);
 5b8:	e59d400c 	ldr	r4, [sp, #12]
 5bc:	e59d1008 	ldr	r1, [sp, #8]
                break;
 5c0:	ea00008b 	b	7f4 <move_index+0x3f0>

            case 0:
            case 1:
            case 5:
                temp_pos = find_next_top(temp_pos, SW);
 5c4:	e58d6008 	str	r6, [sp, #8]
 5c8:	e58d400c 	str	r4, [sp, #12]
 5cc:	e1a0800d 	mov	r8, sp
 5d0:	e1a0000d 	mov	r0, sp
 5d4:	e28d7008 	add	r7, sp, #8
 5d8:	e8970006 	ldm	r7, {r1, r2}
 5dc:	e3a03001 	mov	r3, #1
 5e0:	ebffff1d 	bl	25c <find_next_top>
 5e4:	e89d0003 	ldm	sp, {r0, r1}
 5e8:	e8870003 	stm	r7, {r0, r1}
    //A position inside the matrix is determined based on the new_index which was just created.
    //2 are made so the default value can be referenced for later uses
    temp_pos.x = matrix[new_index].x;
    temp_pos.y = matrix[new_index].y;
    nexus_pos.x = matrix[new_index].x;
    nexus_pos.y = matrix[new_index].y;
 5ec:	e1a02004 	mov	r2, r4
                break;

            case 0:
            case 1:
            case 5:
                temp_pos = find_next_top(temp_pos, SW);
 5f0:	e59d400c 	ldr	r4, [sp, #12]
 5f4:	e59d1008 	ldr	r1, [sp, #8]
                break;
 5f8:	ea00007d 	b	7f4 <move_index+0x3f0>

            case 6:
                if (location == top)
 5fc:	e301339c 	movw	r3, #5020	; 0x139c
 600:	e3403000 	movt	r3, #0
 604:	e5d33000 	ldrb	r3, [r3]
 608:	e3530000 	cmp	r3, #0
    int new_index = index % 8;

    //A position inside the matrix is determined based on the new_index which was just created.
    //2 are made so the default value can be referenced for later uses
    temp_pos.x = matrix[new_index].x;
    temp_pos.y = matrix[new_index].y;
 60c:	11a00004 	movne	r0, r4
    int move_hex = 0;
    int new_index = index % 8;

    //A position inside the matrix is determined based on the new_index which was just created.
    //2 are made so the default value can be referenced for later uses
    temp_pos.x = matrix[new_index].x;
 610:	11a01006 	movne	r1, r6
            case 5:
                temp_pos = find_next_top(temp_pos, SW);
                break;

            case 6:
                if (location == top)
 614:	1a00000c 	bne	64c <move_index+0x248>
                {
                    temp_pos = find_next_top(temp_pos, SW);
 618:	e58d6008 	str	r6, [sp, #8]
 61c:	e58d400c 	str	r4, [sp, #12]
 620:	e1a0800d 	mov	r8, sp
 624:	e1a0000d 	mov	r0, sp
 628:	e28d7008 	add	r7, sp, #8
 62c:	e8970006 	ldm	r7, {r1, r2}
 630:	e3a03001 	mov	r3, #1
 634:	ebffff08 	bl	25c <find_next_top>
 638:	e89d0003 	ldm	sp, {r0, r1}
 63c:	e8870003 	stm	r7, {r0, r1}
 640:	e59d000c 	ldr	r0, [sp, #12]
 644:	e59d1008 	ldr	r1, [sp, #8]
 648:	eaffffff 	b	64c <move_index+0x248>
                }
                if (location == bot)
 64c:	e301339c 	movw	r3, #5020	; 0x139c
 650:	e3403000 	movt	r3, #0
 654:	e5d33000 	ldrb	r3, [r3]
 658:	e3530001 	cmp	r3, #1
    //A position inside the matrix is determined based on the new_index which was just created.
    //2 are made so the default value can be referenced for later uses
    temp_pos.x = matrix[new_index].x;
    temp_pos.y = matrix[new_index].y;
    nexus_pos.x = matrix[new_index].x;
    nexus_pos.y = matrix[new_index].y;
 65c:	11a02004 	movne	r2, r4
            case 6:
                if (location == top)
                {
                    temp_pos = find_next_top(temp_pos, SW);
                }
                if (location == bot)
 660:	11a04000 	movne	r4, r0
 664:	1a000062 	bne	7f4 <move_index+0x3f0>
                {
                    temp_pos = find_next_bot(temp_pos, SW);
 668:	e58d1008 	str	r1, [sp, #8]
 66c:	e58d000c 	str	r0, [sp, #12]
 670:	e1a0800d 	mov	r8, sp
 674:	e1a0000d 	mov	r0, sp
 678:	e28d7008 	add	r7, sp, #8
 67c:	e8970006 	ldm	r7, {r1, r2}
 680:	ebffff2a 	bl	330 <find_next_bot>
 684:	e89d0003 	ldm	sp, {r0, r1}
 688:	e8870003 	stm	r7, {r0, r1}
    //A position inside the matrix is determined based on the new_index which was just created.
    //2 are made so the default value can be referenced for later uses
    temp_pos.x = matrix[new_index].x;
    temp_pos.y = matrix[new_index].y;
    nexus_pos.x = matrix[new_index].x;
    nexus_pos.y = matrix[new_index].y;
 68c:	e1a02004 	mov	r2, r4
                {
                    temp_pos = find_next_top(temp_pos, SW);
                }
                if (location == bot)
                {
                    temp_pos = find_next_bot(temp_pos, SW);
 690:	e59d400c 	ldr	r4, [sp, #12]
 694:	e59d1008 	ldr	r1, [sp, #8]
 698:	ea000055 	b	7f4 <move_index+0x3f0>
                break;
            }
        }
        else
        {
            switch (moves[temp_pos.x][temp_pos.y])
 69c:	e3530006 	cmp	r3, #6
 6a0:	8a00004c 	bhi	7d8 <move_index+0x3d4>
 6a4:	e3a02331 	mov	r2, #-1006632960	; 0xc4000000
 6a8:	e1b02312 	lsls	r2, r2, r3
 6ac:	4a000013 	bmi	700 <move_index+0x2fc>
 6b0:	e3a02402 	mov	r2, #33554432	; 0x2000000
 6b4:	e1b02312 	lsls	r2, r2, r3
 6b8:	4a00001e 	bmi	738 <move_index+0x334>
 6bc:	e3a0230e 	mov	r2, #939524096	; 0x38000000
 6c0:	e1b02312 	lsls	r2, r2, r3
 6c4:	5a000043 	bpl	7d8 <move_index+0x3d4>
            {
            case 2:
            case 3:
            case 4:
                temp_pos = find_next_bot(temp_pos, SW);
 6c8:	e58d6008 	str	r6, [sp, #8]
 6cc:	e58d400c 	str	r4, [sp, #12]
 6d0:	e1a0800d 	mov	r8, sp
 6d4:	e1a0000d 	mov	r0, sp
 6d8:	e28d7008 	add	r7, sp, #8
 6dc:	e8970006 	ldm	r7, {r1, r2}
 6e0:	e3a03000 	mov	r3, #0
 6e4:	ebffff11 	bl	330 <find_next_bot>
 6e8:	e89d0003 	ldm	sp, {r0, r1}
 6ec:	e8870003 	stm	r7, {r0, r1}
    //A position inside the matrix is determined based on the new_index which was just created.
    //2 are made so the default value can be referenced for later uses
    temp_pos.x = matrix[new_index].x;
    temp_pos.y = matrix[new_index].y;
    nexus_pos.x = matrix[new_index].x;
    nexus_pos.y = matrix[new_index].y;
 6f0:	e1a02004 	mov	r2, r4
            switch (moves[temp_pos.x][temp_pos.y])
            {
            case 2:
            case 3:
            case 4:
                temp_pos = find_next_bot(temp_pos, SW);
 6f4:	e59d400c 	ldr	r4, [sp, #12]
 6f8:	e59d1008 	ldr	r1, [sp, #8]
                break;
 6fc:	ea00003c 	b	7f4 <move_index+0x3f0>

            case 0:
            case 1:
            case 5:
                temp_pos = find_next_top(temp_pos, SW);
 700:	e58d6008 	str	r6, [sp, #8]
 704:	e58d400c 	str	r4, [sp, #12]
 708:	e1a0800d 	mov	r8, sp
 70c:	e1a0000d 	mov	r0, sp
 710:	e28d7008 	add	r7, sp, #8
 714:	e8970006 	ldm	r7, {r1, r2}
 718:	e3a03000 	mov	r3, #0
 71c:	ebfffece 	bl	25c <find_next_top>
 720:	e89d0003 	ldm	sp, {r0, r1}
 724:	e8870003 	stm	r7, {r0, r1}
    //A position inside the matrix is determined based on the new_index which was just created.
    //2 are made so the default value can be referenced for later uses
    temp_pos.x = matrix[new_index].x;
    temp_pos.y = matrix[new_index].y;
    nexus_pos.x = matrix[new_index].x;
    nexus_pos.y = matrix[new_index].y;
 728:	e1a02004 	mov	r2, r4
                break;

            case 0:
            case 1:
            case 5:
                temp_pos = find_next_top(temp_pos, SW);
 72c:	e59d400c 	ldr	r4, [sp, #12]
 730:	e59d1008 	ldr	r1, [sp, #8]
                break;
 734:	ea00002e 	b	7f4 <move_index+0x3f0>

            case 6:
                if (location == top)
 738:	e301339c 	movw	r3, #5020	; 0x139c
 73c:	e3403000 	movt	r3, #0
 740:	e5d33000 	ldrb	r3, [r3]
 744:	e3530000 	cmp	r3, #0
    int new_index = index % 8;

    //A position inside the matrix is determined based on the new_index which was just created.
    //2 are made so the default value can be referenced for later uses
    temp_pos.x = matrix[new_index].x;
    temp_pos.y = matrix[new_index].y;
 748:	11a00004 	movne	r0, r4
    int move_hex = 0;
    int new_index = index % 8;

    //A position inside the matrix is determined based on the new_index which was just created.
    //2 are made so the default value can be referenced for later uses
    temp_pos.x = matrix[new_index].x;
 74c:	11a01006 	movne	r1, r6
            case 5:
                temp_pos = find_next_top(temp_pos, SW);
                break;

            case 6:
                if (location == top)
 750:	1a00000b 	bne	784 <move_index+0x380>
                {
                    temp_pos = find_next_top(temp_pos, SW);
 754:	e58d6008 	str	r6, [sp, #8]
 758:	e58d400c 	str	r4, [sp, #12]
 75c:	e1a0800d 	mov	r8, sp
 760:	e1a0000d 	mov	r0, sp
 764:	e28d7008 	add	r7, sp, #8
 768:	e8970006 	ldm	r7, {r1, r2}
 76c:	ebfffeba 	bl	25c <find_next_top>
 770:	e89d0003 	ldm	sp, {r0, r1}
 774:	e8870003 	stm	r7, {r0, r1}
 778:	e59d000c 	ldr	r0, [sp, #12]
 77c:	e59d1008 	ldr	r1, [sp, #8]
 780:	eaffffff 	b	784 <move_index+0x380>
                }
                if (location == bot)
 784:	e301339c 	movw	r3, #5020	; 0x139c
 788:	e3403000 	movt	r3, #0
 78c:	e5d33000 	ldrb	r3, [r3]
 790:	e3530001 	cmp	r3, #1
    //A position inside the matrix is determined based on the new_index which was just created.
    //2 are made so the default value can be referenced for later uses
    temp_pos.x = matrix[new_index].x;
    temp_pos.y = matrix[new_index].y;
    nexus_pos.x = matrix[new_index].x;
    nexus_pos.y = matrix[new_index].y;
 794:	11a02004 	movne	r2, r4
            case 6:
                if (location == top)
                {
                    temp_pos = find_next_top(temp_pos, SW);
                }
                if (location == bot)
 798:	11a04000 	movne	r4, r0
 79c:	1a000014 	bne	7f4 <move_index+0x3f0>
                {
                    temp_pos = find_next_bot(temp_pos, SW);
 7a0:	e58d1008 	str	r1, [sp, #8]
 7a4:	e58d000c 	str	r0, [sp, #12]
 7a8:	e1a0800d 	mov	r8, sp
 7ac:	e1a0000d 	mov	r0, sp
 7b0:	e28d7008 	add	r7, sp, #8
 7b4:	e8970006 	ldm	r7, {r1, r2}
 7b8:	e3a03000 	mov	r3, #0
 7bc:	ebfffedb 	bl	330 <find_next_bot>
 7c0:	e89d0003 	ldm	sp, {r0, r1}
 7c4:	e8870003 	stm	r7, {r0, r1}
    //A position inside the matrix is determined based on the new_index which was just created.
    //2 are made so the default value can be referenced for later uses
    temp_pos.x = matrix[new_index].x;
    temp_pos.y = matrix[new_index].y;
    nexus_pos.x = matrix[new_index].x;
    nexus_pos.y = matrix[new_index].y;
 7c8:	e1a02004 	mov	r2, r4
                {
                    temp_pos = find_next_top(temp_pos, SW);
                }
                if (location == bot)
                {
                    temp_pos = find_next_bot(temp_pos, SW);
 7cc:	e59d400c 	ldr	r4, [sp, #12]
 7d0:	e59d1008 	ldr	r1, [sp, #8]
 7d4:	ea000006 	b	7f4 <move_index+0x3f0>
 7d8:	e1a01006 	mov	r1, r6
 7dc:	e1a02004 	mov	r2, r4
 7e0:	ea000003 	b	7f4 <move_index+0x3f0>
    {
        if (move_hex > 0)
        {
            if ((index + 8) > 31)
            {
                index += (8 - 32);
 7e4:	e2455018 	sub	r5, r5, #24
 7e8:	ea000029 	b	894 <move_index+0x490>
        }
        if (move_hex < 0)
        {
            if ((index - 8) < 0)
            {
                index += (-8 + 32);
 7ec:	e2855018 	add	r5, r5, #24
 7f0:	e1a02004 	mov	r2, r4
        }
    }

    //index is adjusted based on the new position
    //this is done by using the difference between the new and old value  
    index = index - moves[nexus_pos.y][nexus_pos.x] + moves[temp_pos.y][temp_pos.x];
 7f4:	e3003e88 	movw	r3, #3720	; 0xe88
 7f8:	e3403000 	movt	r3, #0
 7fc:	e0822082 	add	r2, r2, r2, lsl #1
 800:	e0826006 	add	r6, r2, r6
 804:	e7930106 	ldr	r0, [r3, r6, lsl #2]
 808:	e0605005 	rsb	r5, r0, r5
 80c:	e0844084 	add	r4, r4, r4, lsl #1
 810:	e0841001 	add	r1, r4, r1
 814:	e7933101 	ldr	r3, [r3, r1, lsl #2]
 818:	e0850003 	add	r0, r5, r3
 81c:	ea00001e 	b	89c <move_index+0x498>
    //A position inside the matrix is determined based on the new_index which was just created.
    //2 are made so the default value can be referenced for later uses
    temp_pos.x = matrix[new_index].x;
    temp_pos.y = matrix[new_index].y;
    nexus_pos.x = matrix[new_index].x;
    nexus_pos.y = matrix[new_index].y;
 820:	e1a02004 	mov	r2, r4
    int move_hex = 0;
    int new_index = index % 8;

    //A position inside the matrix is determined based on the new_index which was just created.
    //2 are made so the default value can be referenced for later uses
    temp_pos.x = matrix[new_index].x;
 824:	e1a01006 	mov	r1, r6
        //when the end of either side is reached and a next step in the same direction would exceed the ending
        //the position is switched to that of the opposite end.
        if (nexus_pos.x == 1){
            if (SW){
                if (temp_pos.y == 0){
                    temp_pos.y = 2;
 828:	e3a04002 	mov	r4, #2
 82c:	eafffff0 	b	7f4 <move_index+0x3f0>
    //A position inside the matrix is determined based on the new_index which was just created.
    //2 are made so the default value can be referenced for later uses
    temp_pos.x = matrix[new_index].x;
    temp_pos.y = matrix[new_index].y;
    nexus_pos.x = matrix[new_index].x;
    nexus_pos.y = matrix[new_index].y;
 830:	e1a02004 	mov	r2, r4
    int move_hex = 0;
    int new_index = index % 8;

    //A position inside the matrix is determined based on the new_index which was just created.
    //2 are made so the default value can be referenced for later uses
    temp_pos.x = matrix[new_index].x;
 834:	e1a01006 	mov	r1, r6
                }else{
                    temp_pos.y--;
                }
            }else{
                if (temp_pos.y == 2){
                    temp_pos.y = 0;
 838:	e3a04000 	mov	r4, #0
 83c:	eaffffec 	b	7f4 <move_index+0x3f0>
    int move_hex = 0;
    int new_index = index % 8;

    //A position inside the matrix is determined based on the new_index which was just created.
    //2 are made so the default value can be referenced for later uses
    temp_pos.x = matrix[new_index].x;
 840:	e1a01006 	mov	r1, r6
        else if (nexus_pos.x == 0 || nexus_pos.x == 2){
            if (SW){
                if (nexus_pos.y == 1){
                    temp_pos.y = 2;
                }else{
                    nexus_pos.y = 1;
 844:	e3a02001 	mov	r2, #1
 848:	eaffffe9 	b	7f4 <move_index+0x3f0>
    //A position inside the matrix is determined based on the new_index which was just created.
    //2 are made so the default value can be referenced for later uses
    temp_pos.x = matrix[new_index].x;
    temp_pos.y = matrix[new_index].y;
    nexus_pos.x = matrix[new_index].x;
    nexus_pos.y = matrix[new_index].y;
 84c:	e1a02004 	mov	r2, r4
    int move_hex = 0;
    int new_index = index % 8;

    //A position inside the matrix is determined based on the new_index which was just created.
    //2 are made so the default value can be referenced for later uses
    temp_pos.x = matrix[new_index].x;
 850:	e1a01006 	mov	r1, r6
                }
            }else{
                if (nexus_pos.y == 2){
                    temp_pos.y = 1;
                }else{
                    temp_pos.y = 2;
 854:	e3a04002 	mov	r4, #2
 858:	eaffffe5 	b	7f4 <move_index+0x3f0>
    int move_hex = 0;
    int new_index = index % 8;

    //A position inside the matrix is determined based on the new_index which was just created.
    //2 are made so the default value can be referenced for later uses
    temp_pos.x = matrix[new_index].x;
 85c:	e1a01006 	mov	r1, r6
 860:	ea000000 	b	868 <move_index+0x464>
                    temp_pos.x = 2;
                }
                break;
            }else{
                if (temp_pos.x == 0){
                    temp_pos.x = 2;
 864:	e3a01002 	mov	r1, #2
    //it also handles overflow from the first to last, or last to first display
    if (move_hex != 0)
    {
        if (move_hex > 0)
        {
            if ((index + 8) > 31)
 868:	e2853008 	add	r3, r5, #8
 86c:	e353001f 	cmp	r3, #31
            {
                index += (8 - 32);
            }
            else
            {
                index += 8;
 870:	d1a05003 	movle	r5, r3
    //it also handles overflow from the first to last, or last to first display
    if (move_hex != 0)
    {
        if (move_hex > 0)
        {
            if ((index + 8) > 31)
 874:	da000006 	ble	894 <move_index+0x490>
 878:	eaffffd9 	b	7e4 <move_index+0x3e0>
        //if it already finds itself on the outside of its movement, the sides need to be switched and move_hex adjusted
        //to switch between displays
        else{
            if (SW){
                if (temp_pos.x == 2){
                    temp_pos.x = 0;
 87c:	e3a01000 	mov	r1, #0
                index += 8;
            }
        }
        if (move_hex < 0)
        {
            if ((index - 8) < 0)
 880:	e2553008 	subs	r3, r5, #8
 884:	4affffd8 	bmi	7ec <move_index+0x3e8>
 888:	e1a02004 	mov	r2, r4
            {
                index += (-8 + 32);
            }
            else
            {
                index -= 8;
 88c:	e1a05003 	mov	r5, r3
 890:	eaffffd7 	b	7f4 <move_index+0x3f0>
 894:	e1a02004 	mov	r2, r4
 898:	eaffffd5 	b	7f4 <move_index+0x3f0>
    //index is adjusted based on the new position
    //this is done by using the difference between the new and old value  
    index = index - moves[nexus_pos.y][nexus_pos.x] + moves[temp_pos.y][temp_pos.x];

    return index;
}
 89c:	e28dd010 	add	sp, sp, #16
 8a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000008a4 <write_hex>:

//a function to write a 1 to a position based on the index provided
long int write_hex(int index, long int HEX)
{
    return (HEX | (1 << index));
}
 8a4:	e3a03001 	mov	r3, #1
 8a8:	e1810013 	orr	r0, r1, r3, lsl r0
 8ac:	e12fff1e 	bx	lr

000008b0 <remove_hex>:

//a function to write a 0 to a position based on the index provided
long int remove_hex(int index, long int HEX)
{
    return (HEX & ~(1 << index));
}
 8b0:	e3a03001 	mov	r3, #1
 8b4:	e1c10013 	bic	r0, r1, r3, lsl r0
 8b8:	e12fff1e 	bx	lr

000008bc <main>:

int main(void)
{
 8bc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
 8c0:	e24dd008 	sub	sp, sp, #8
    //setting default values for some variables
    long int HEX_bits = 0x00000000;
    long int LED_bits = 0x00000000;
    long int WRITE_OUT = 0x00000000;

    int SW_value, KEY_value, index = 0;
 8c4:	e3a05000 	mov	r5, #0
    volatile int *SW_switch_ptr = (int *)SW_BASE; 
    volatile int *KEY_ptr = (int *)KEY_BASE;      
    volatile int *HEX3_HEX0_ptr = (int *)HEX3_HEX0_BASE;

    //setting default values for some variables
    long int HEX_bits = 0x00000000;
 8c8:	e1a07005 	mov	r7, r5
        //resetting the neccesery values
        LED_bits = 0x00000000;
        WRITE_OUT = 0x00000000;

        //reading the current values of the KEYS and SWITCHES
        SW_value = *(SW_switch_ptr); 
 8cc:	e1a04005 	mov	r4, r5
 8d0:	e34f4f20 	movt	r4, #65312	; 0xff20
            {
                index = move_index(index, horizontal, 1);
            }
            else
            {
                index = move_index(index, horizontal, 0);
 8d4:	e1a0a005 	mov	r10, r5
        {
        //this is for the horizontal button
        case 0x1:
            if (SW_value & 0x1)
            {
                index = move_index(index, horizontal, 1);
 8d8:	e3a06001 	mov	r6, #1
            {
                index = move_index(index, rotate, 1);
            }
            else
            {
                index = move_index(index, rotate, 0);
 8dc:	e3a09002 	mov	r9, #2
        //wait for as long as the key continues to be pressed
        //so no actions are repeated on a single button press
        while (*KEY_ptr);

        //delay
        for (delay_count = 350000; delay_count != 0; --delay_count); 
 8e0:	e3058730 	movw	r8, #22320	; 0x5730
 8e4:	e3408005 	movt	r8, #5
        //resetting the neccesery values
        LED_bits = 0x00000000;
        WRITE_OUT = 0x00000000;

        //reading the current values of the KEYS and SWITCHES
        SW_value = *(SW_switch_ptr); 
 8e8:	e5942040 	ldr	r2, [r4, #64]	; 0x40
        KEY_value = *(KEY_ptr);      
 8ec:	e5943050 	ldr	r3, [r4, #80]	; 0x50

        //switching based on which KEY is pressed
        switch (KEY_value)
 8f0:	e2433001 	sub	r3, r3, #1
 8f4:	e3530007 	cmp	r3, #7
 8f8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 8fc:	ea00002a 	b	9ac <main+0xf0>
 900:	00000920 	.word	0x00000920
 904:	00000940 	.word	0x00000940
 908:	000009ac 	.word	0x000009ac
 90c:	00000960 	.word	0x00000960
 910:	000009ac 	.word	0x000009ac
 914:	000009ac 	.word	0x000009ac
 918:	000009ac 	.word	0x000009ac
 91c:	00000980 	.word	0x00000980
        {
        //this is for the horizontal button
        case 0x1:
            if (SW_value & 0x1)
 920:	e3120001 	tst	r2, #1
            {
                index = move_index(index, horizontal, 1);
 924:	e1a00005 	mov	r0, r5
 928:	e1a0100a 	mov	r1, r10
 92c:	11a02006 	movne	r2, r6
            }
            else
            {
                index = move_index(index, horizontal, 0);
 930:	01a0200a 	moveq	r2, r10
 934:	ebfffeb2 	bl	404 <move_index>
 938:	e1a05000 	mov	r5, r0
 93c:	ea00001a 	b	9ac <main+0xf0>
            }
            break;
        //this is for the vertical button
        case 0x2:
            if (SW_value & 0x2)
 940:	e3120002 	tst	r2, #2
            {
                index = move_index(index, vertical, 1);
 944:	e1a00005 	mov	r0, r5
 948:	e1a01006 	mov	r1, r6
 94c:	11a02006 	movne	r2, r6
            }
            else
            {
                index = move_index(index, vertical, 0);
 950:	01a0200a 	moveq	r2, r10
 954:	ebfffeaa 	bl	404 <move_index>
 958:	e1a05000 	mov	r5, r0
 95c:	ea000012 	b	9ac <main+0xf0>
            }
            break;
        //this is for the rotation button
        case 0x4:
            if (SW_value & 0x4)
 960:	e3120004 	tst	r2, #4
            {
                index = move_index(index, rotate, 1);
 964:	e1a00005 	mov	r0, r5
 968:	e1a01009 	mov	r1, r9
 96c:	11a02006 	movne	r2, r6
            }
            else
            {
                index = move_index(index, rotate, 0);
 970:	01a0200a 	moveq	r2, r10
 974:	ebfffea2 	bl	404 <move_index>
 978:	e1a05000 	mov	r5, r0
 97c:	ea00000a 	b	9ac <main+0xf0>
            }
            break;

        //the last butten is for handeling the writing or removing of a bit in HEX_bits
        case 0x8:
            if (SW_value & 0x8)
 980:	e3120008 	tst	r2, #8
 984:	0a000004 	beq	99c <main+0xe0>
            {
                HEX_bits = remove_hex(index, HEX_bits);
 988:	e1a00005 	mov	r0, r5
 98c:	e1a01007 	mov	r1, r7
 990:	ebffffc6 	bl	8b0 <remove_hex>
 994:	e1a07000 	mov	r7, r0
 998:	ea000003 	b	9ac <main+0xf0>
            }
            else
            {
                HEX_bits = write_hex(index, HEX_bits);
 99c:	e1a00005 	mov	r0, r5
 9a0:	e1a01007 	mov	r1, r7
 9a4:	ebffffbe 	bl	8a4 <write_hex>
 9a8:	e1a07000 	mov	r7, r0
        default:
            break;
        }

        //WRITE_OUT is the combination of the current index and HEX_bits
        WRITE_OUT = (HEX_bits | ((1 << index) & 0xffffffff));
 9ac:	e1873516 	orr	r3, r7, r6, lsl r5
        *(HEX3_HEX0_ptr) = WRITE_OUT;
 9b0:	e5843020 	str	r3, [r4, #32]
        //the value is also written to the bottem LED's so the current index is easier to determine
        //mostly for debugging purposes
        *(LED_ptr) = (index & 0xffffffff);
 9b4:	e5845000 	str	r5, [r4]

        //wait for as long as the key continues to be pressed
        //so no actions are repeated on a single button press
        while (*KEY_ptr);
 9b8:	e5943050 	ldr	r3, [r4, #80]	; 0x50
 9bc:	e3530000 	cmp	r3, #0
 9c0:	1afffffc 	bne	9b8 <main+0xfc>

        //delay
        for (delay_count = 350000; delay_count != 0; --delay_count); 
 9c4:	e58d8004 	str	r8, [sp, #4]
 9c8:	e59d3004 	ldr	r3, [sp, #4]
 9cc:	e3530000 	cmp	r3, #0
 9d0:	0affffc4 	beq	8e8 <main+0x2c>
 9d4:	e59d3004 	ldr	r3, [sp, #4]
 9d8:	e2433001 	sub	r3, r3, #1
 9dc:	e58d3004 	str	r3, [sp, #4]
 9e0:	e59d3004 	ldr	r3, [sp, #4]
 9e4:	e3530000 	cmp	r3, #0
 9e8:	0affffbe 	beq	8e8 <main+0x2c>
 9ec:	eafffff8 	b	9d4 <main+0x118>

000009f0 <atexit>:
 9f0:	e1a01000 	mov	r1, r0
 9f4:	e3a00000 	mov	r0, #0
 9f8:	e92d4008 	push	{r3, lr}
 9fc:	e1a02000 	mov	r2, r0
 a00:	e1a03000 	mov	r3, r0
 a04:	eb00000e 	bl	a44 <__register_exitproc>
 a08:	e8bd4008 	pop	{r3, lr}
 a0c:	e12fff1e 	bx	lr

00000a10 <exit>:
 a10:	e92d4008 	push	{r3, lr}
 a14:	e3a01000 	mov	r1, #0
 a18:	e1a04000 	mov	r4, r0
 a1c:	eb000045 	bl	b38 <__call_exitprocs>
 a20:	e59f3018 	ldr	r3, [pc, #24]	; a40 <exit+0x30>
 a24:	e5930000 	ldr	r0, [r3]
 a28:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 a2c:	e3530000 	cmp	r3, #0
 a30:	11a0e00f 	movne	lr, pc
 a34:	112fff13 	bxne	r3
 a38:	e1a00004 	mov	r0, r4
 a3c:	eb0000c9 	bl	d68 <_exit>
 a40:	00000e28 	.word	0x00000e28

00000a44 <__register_exitproc>:
 a44:	e59fc0e4 	ldr	r12, [pc, #228]	; b30 <__register_exitproc+0xec>
 a48:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 a4c:	e59c4000 	ldr	r4, [r12]
 a50:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 a54:	e35c0000 	cmp	r12, #0
 a58:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 a5c:	e59c5004 	ldr	r5, [r12, #4]
 a60:	0584c148 	streq	r12, [r4, #328]	; 0x148
 a64:	e355001f 	cmp	r5, #31
 a68:	e24dd010 	sub	sp, sp, #16
 a6c:	e1a06000 	mov	r6, r0
 a70:	da000015 	ble	acc <__register_exitproc+0x88>
 a74:	e59f00b8 	ldr	r0, [pc, #184]	; b34 <__register_exitproc+0xf0>
 a78:	e3500000 	cmp	r0, #0
 a7c:	1a000001 	bne	a88 <__register_exitproc+0x44>
 a80:	e3e00000 	mvn	r0, #0
 a84:	ea000018 	b	aec <__register_exitproc+0xa8>
 a88:	e3a00e19 	mov	r0, #400	; 0x190
 a8c:	e58d100c 	str	r1, [sp, #12]
 a90:	e58d2008 	str	r2, [sp, #8]
 a94:	e58d3004 	str	r3, [sp, #4]
 a98:	e320f000 	nop	{0}
 a9c:	e250c000 	subs	r12, r0, #0
 aa0:	e59d100c 	ldr	r1, [sp, #12]
 aa4:	e59d2008 	ldr	r2, [sp, #8]
 aa8:	e59d3004 	ldr	r3, [sp, #4]
 aac:	0afffff3 	beq	a80 <__register_exitproc+0x3c>
 ab0:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 ab4:	e3a00000 	mov	r0, #0
 ab8:	e58c0004 	str	r0, [r12, #4]
 abc:	e58c5000 	str	r5, [r12]
 ac0:	e584c148 	str	r12, [r4, #328]	; 0x148
 ac4:	e58c0188 	str	r0, [r12, #392]	; 0x188
 ac8:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 acc:	e3560000 	cmp	r6, #0
 ad0:	e59c4004 	ldr	r4, [r12, #4]
 ad4:	1a000007 	bne	af8 <__register_exitproc+0xb4>
 ad8:	e2843002 	add	r3, r4, #2
 adc:	e2844001 	add	r4, r4, #1
 ae0:	e78c1103 	str	r1, [r12, r3, lsl #2]
 ae4:	e58c4004 	str	r4, [r12, #4]
 ae8:	e3a00000 	mov	r0, #0
 aec:	e28dd010 	add	sp, sp, #16
 af0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 af4:	e12fff1e 	bx	lr
 af8:	e3a00001 	mov	r0, #1
 afc:	e1a00410 	lsl	r0, r0, r4
 b00:	e08c8104 	add	r8, r12, r4, lsl #2
 b04:	e3560002 	cmp	r6, #2
 b08:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 b0c:	e5883108 	str	r3, [r8, #264]	; 0x108
 b10:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 b14:	e1877000 	orr	r7, r7, r0
 b18:	01830000 	orreq	r0, r3, r0
 b1c:	e1a05008 	mov	r5, r8
 b20:	e5882088 	str	r2, [r8, #136]	; 0x88
 b24:	e58c7188 	str	r7, [r12, #392]	; 0x188
 b28:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 b2c:	eaffffe9 	b	ad8 <__register_exitproc+0x94>
 b30:	00000e28 	.word	0x00000e28
 b34:	00000000 	.word	0x00000000

00000b38 <__call_exitprocs>:
 b38:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 b3c:	e59f3168 	ldr	r3, [pc, #360]	; cac <__call_exitprocs+0x174>
 b40:	e5933000 	ldr	r3, [r3]
 b44:	e24dd014 	sub	sp, sp, #20
 b48:	e58d3004 	str	r3, [sp, #4]
 b4c:	e2833f52 	add	r3, r3, #328	; 0x148
 b50:	e58d0008 	str	r0, [sp, #8]
 b54:	e58d300c 	str	r3, [sp, #12]
 b58:	e1a07001 	mov	r7, r1
 b5c:	e3a08001 	mov	r8, #1
 b60:	e59d3004 	ldr	r3, [sp, #4]
 b64:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 b68:	e3560000 	cmp	r6, #0
 b6c:	e59db00c 	ldr	r11, [sp, #12]
 b70:	0a000033 	beq	c44 <__call_exitprocs+0x10c>
 b74:	e5965004 	ldr	r5, [r6, #4]
 b78:	e2554001 	subs	r4, r5, #1
 b7c:	5286a088 	addpl	r10, r6, #136	; 0x88
 b80:	5285501f 	addpl	r5, r5, #31
 b84:	508a5105 	addpl	r5, r10, r5, lsl #2
 b88:	5a000007 	bpl	bac <__call_exitprocs+0x74>
 b8c:	ea000029 	b	c38 <__call_exitprocs+0x100>
 b90:	e5953000 	ldr	r3, [r5]
 b94:	e1530007 	cmp	r3, r7
 b98:	0a000005 	beq	bb4 <__call_exitprocs+0x7c>
 b9c:	e2444001 	sub	r4, r4, #1
 ba0:	e3740001 	cmn	r4, #1
 ba4:	e2455004 	sub	r5, r5, #4
 ba8:	0a000022 	beq	c38 <__call_exitprocs+0x100>
 bac:	e3570000 	cmp	r7, #0
 bb0:	1afffff6 	bne	b90 <__call_exitprocs+0x58>
 bb4:	e5963004 	ldr	r3, [r6, #4]
 bb8:	e06a2005 	rsb	r2, r10, r5
 bbc:	e2433001 	sub	r3, r3, #1
 bc0:	e0862002 	add	r2, r6, r2
 bc4:	e1530004 	cmp	r3, r4
 bc8:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 bcc:	13a01000 	movne	r1, #0
 bd0:	05864004 	streq	r4, [r6, #4]
 bd4:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 bd8:	e3530000 	cmp	r3, #0
 bdc:	0affffee 	beq	b9c <__call_exitprocs+0x64>
 be0:	e1a02418 	lsl	r2, r8, r4
 be4:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 be8:	e1120001 	tst	r2, r1
 bec:	e5969004 	ldr	r9, [r6, #4]
 bf0:	0a000016 	beq	c50 <__call_exitprocs+0x118>
 bf4:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 bf8:	e1120001 	tst	r2, r1
 bfc:	1a000016 	bne	c5c <__call_exitprocs+0x124>
 c00:	e59d0008 	ldr	r0, [sp, #8]
 c04:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 c08:	e1a0e00f 	mov	lr, pc
 c0c:	e12fff13 	bx	r3
 c10:	e5963004 	ldr	r3, [r6, #4]
 c14:	e1530009 	cmp	r3, r9
 c18:	1affffd0 	bne	b60 <__call_exitprocs+0x28>
 c1c:	e59b3000 	ldr	r3, [r11]
 c20:	e1530006 	cmp	r3, r6
 c24:	1affffcd 	bne	b60 <__call_exitprocs+0x28>
 c28:	e2444001 	sub	r4, r4, #1
 c2c:	e3740001 	cmn	r4, #1
 c30:	e2455004 	sub	r5, r5, #4
 c34:	1affffdc 	bne	bac <__call_exitprocs+0x74>
 c38:	e59f1070 	ldr	r1, [pc, #112]	; cb0 <__call_exitprocs+0x178>
 c3c:	e3510000 	cmp	r1, #0
 c40:	1a000009 	bne	c6c <__call_exitprocs+0x134>
 c44:	e28dd014 	add	sp, sp, #20
 c48:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 c4c:	e12fff1e 	bx	lr
 c50:	e1a0e00f 	mov	lr, pc
 c54:	e12fff13 	bx	r3
 c58:	eaffffec 	b	c10 <__call_exitprocs+0xd8>
 c5c:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 c60:	e1a0e00f 	mov	lr, pc
 c64:	e12fff13 	bx	r3
 c68:	eaffffe8 	b	c10 <__call_exitprocs+0xd8>
 c6c:	e5963004 	ldr	r3, [r6, #4]
 c70:	e3530000 	cmp	r3, #0
 c74:	e5963000 	ldr	r3, [r6]
 c78:	1a000008 	bne	ca0 <__call_exitprocs+0x168>
 c7c:	e3530000 	cmp	r3, #0
 c80:	0a000006 	beq	ca0 <__call_exitprocs+0x168>
 c84:	e1a00006 	mov	r0, r6
 c88:	e58b3000 	str	r3, [r11]
 c8c:	e320f000 	nop	{0}
 c90:	e59b6000 	ldr	r6, [r11]
 c94:	e3560000 	cmp	r6, #0
 c98:	1affffb5 	bne	b74 <__call_exitprocs+0x3c>
 c9c:	eaffffe8 	b	c44 <__call_exitprocs+0x10c>
 ca0:	e1a0b006 	mov	r11, r6
 ca4:	e1a06003 	mov	r6, r3
 ca8:	eafffff9 	b	c94 <__call_exitprocs+0x15c>
 cac:	00000e28 	.word	0x00000e28
 cb0:	00000000 	.word	0x00000000

00000cb4 <register_fini>:
 cb4:	e92d4008 	push	{r3, lr}
 cb8:	e59f3010 	ldr	r3, [pc, #16]	; cd0 <register_fini+0x1c>
 cbc:	e3530000 	cmp	r3, #0
 cc0:	159f000c 	ldrne	r0, [pc, #12]	; cd4 <register_fini+0x20>
 cc4:	1bffff49 	blne	9f0 <atexit>
 cc8:	e8bd4008 	pop	{r3, lr}
 ccc:	e12fff1e 	bx	lr
 cd0:	00000e50 	.word	0x00000e50
 cd4:	00000cd8 	.word	0x00000cd8

00000cd8 <__libc_fini_array>:
 cd8:	e92d4038 	push	{r3, r4, r5, lr}
 cdc:	e59f5030 	ldr	r5, [pc, #48]	; d14 <__libc_fini_array+0x3c>
 ce0:	e59f4030 	ldr	r4, [pc, #48]	; d18 <__libc_fini_array+0x40>
 ce4:	e0654004 	rsb	r4, r5, r4
 ce8:	e1b04144 	asrs	r4, r4, #2
 cec:	10855104 	addne	r5, r5, r4, lsl #2
 cf0:	0a000004 	beq	d08 <__libc_fini_array+0x30>
 cf4:	e5353004 	ldr	r3, [r5, #-4]!
 cf8:	e1a0e00f 	mov	lr, pc
 cfc:	e12fff13 	bx	r3
 d00:	e2544001 	subs	r4, r4, #1
 d04:	1afffffa 	bne	cf4 <__libc_fini_array+0x1c>
 d08:	eb000050 	bl	e50 <__libc_fini>
 d0c:	e8bd4038 	pop	{r3, r4, r5, lr}
 d10:	e12fff1e 	bx	lr
 d14:	00000e68 	.word	0x00000e68
 d18:	00000e6c 	.word	0x00000e6c

00000d1c <__cs3_premain>:
 d1c:	e92d4008 	push	{r3, lr}
 d20:	eb00001d 	bl	d9c <__libc_init_array>
 d24:	e59f3030 	ldr	r3, [pc, #48]	; d5c <__cs3_premain+0x40>
 d28:	e3530000 	cmp	r3, #0
 d2c:	15930000 	ldrne	r0, [r3]
 d30:	01a00003 	moveq	r0, r3
 d34:	e59f3024 	ldr	r3, [pc, #36]	; d60 <__cs3_premain+0x44>
 d38:	e3530000 	cmp	r3, #0
 d3c:	15931000 	ldrne	r1, [r3]
 d40:	01a01003 	moveq	r1, r3
 d44:	e3a02000 	mov	r2, #0
 d48:	ebfffedb 	bl	8bc <main>
 d4c:	e59f3010 	ldr	r3, [pc, #16]	; d64 <__cs3_premain+0x48>
 d50:	e3530000 	cmp	r3, #0
 d54:	1bffff2d 	blne	a10 <exit>
 d58:	eafffffe 	b	d58 <__cs3_premain+0x3c>
	...
 d64:	00000a10 	.word	0x00000a10

00000d68 <_exit>:
 d68:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 d6c:	e3a00018 	mov	r0, #24
 d70:	e59f1004 	ldr	r1, [pc, #4]	; d7c <_exit+0x14>
 d74:	ef123456 	svc	0x00123456
 d78:	eafffffe 	b	d78 <_exit+0x10>
 d7c:	00020026 	.word	0x00020026

00000d80 <__cs3_isr_interrupt>:
 d80:	eafffffe 	b	d80 <__cs3_isr_interrupt>

00000d84 <__cs3_isr_undef>:
 d84:	eafffffe 	b	d84 <__cs3_isr_undef>

00000d88 <__cs3_isr_swi>:
 d88:	eafffffe 	b	d88 <__cs3_isr_swi>

00000d8c <__cs3_isr_pabort>:
 d8c:	eafffffe 	b	d8c <__cs3_isr_pabort>

00000d90 <__cs3_isr_dabort>:
 d90:	eafffffe 	b	d90 <__cs3_isr_dabort>

00000d94 <__cs3_isr_irq>:
 d94:	eafffffe 	b	d94 <__cs3_isr_irq>

00000d98 <__cs3_isr_fiq>:
 d98:	eafffffe 	b	d98 <__cs3_isr_fiq>

00000d9c <__libc_init_array>:
 d9c:	e92d4070 	push	{r4, r5, r6, lr}
 da0:	e59f506c 	ldr	r5, [pc, #108]	; e14 <__libc_init_array+0x78>
 da4:	e59f606c 	ldr	r6, [pc, #108]	; e18 <__libc_init_array+0x7c>
 da8:	e0656006 	rsb	r6, r5, r6
 dac:	e1b06146 	asrs	r6, r6, #2
 db0:	12455004 	subne	r5, r5, #4
 db4:	13a04000 	movne	r4, #0
 db8:	0a000005 	beq	dd4 <__libc_init_array+0x38>
 dbc:	e5b53004 	ldr	r3, [r5, #4]!
 dc0:	e2844001 	add	r4, r4, #1
 dc4:	e1a0e00f 	mov	lr, pc
 dc8:	e12fff13 	bx	r3
 dcc:	e1560004 	cmp	r6, r4
 dd0:	1afffff9 	bne	dbc <__libc_init_array+0x20>
 dd4:	e59f5040 	ldr	r5, [pc, #64]	; e1c <__libc_init_array+0x80>
 dd8:	e59f6040 	ldr	r6, [pc, #64]	; e20 <__libc_init_array+0x84>
 ddc:	e0656006 	rsb	r6, r5, r6
 de0:	eb000012 	bl	e30 <_init>
 de4:	e1b06146 	asrs	r6, r6, #2
 de8:	12455004 	subne	r5, r5, #4
 dec:	13a04000 	movne	r4, #0
 df0:	0a000005 	beq	e0c <__libc_init_array+0x70>
 df4:	e5b53004 	ldr	r3, [r5, #4]!
 df8:	e2844001 	add	r4, r4, #1
 dfc:	e1a0e00f 	mov	lr, pc
 e00:	e12fff13 	bx	r3
 e04:	e1560004 	cmp	r6, r4
 e08:	1afffff9 	bne	df4 <__libc_init_array+0x58>
 e0c:	e8bd4070 	pop	{r4, r5, r6, lr}
 e10:	e12fff1e 	bx	lr
 e14:	00000e48 	.word	0x00000e48
 e18:	00000e48 	.word	0x00000e48
 e1c:	00000e48 	.word	0x00000e48
 e20:	00000e50 	.word	0x00000e50

Disassembly of section .rodata:

00000e28 <_global_impure_ptr>:
 e28:	00000f50 00000043                       P...C...

00000e30 <_init>:
 e30:	e1a0c00d 	mov	r12, sp
 e34:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 e38:	e24cb004 	sub	r11, r12, #4
 e3c:	e24bd028 	sub	sp, r11, #40	; 0x28
 e40:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 e44:	e12fff1e 	bx	lr

00000e48 <__init_array_start>:
 e48:	00000cb4 	.word	0x00000cb4

00000e4c <__frame_dummy_init_array_entry>:
 e4c:	00000208                                ....

00000e50 <__libc_fini>:
 e50:	e1a0c00d 	mov	r12, sp
 e54:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 e58:	e24cb004 	sub	r11, r12, #4
 e5c:	e24bd028 	sub	sp, r11, #40	; 0x28
 e60:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 e64:	e12fff1e 	bx	lr

00000e68 <__fini_array_start>:
 e68:	000001c4 	.word	0x000001c4

00000e6c <__cs3_regions>:
	...
 e78:	00001380 	.word	0x00001380
 e7c:	00000020 	.word	0x00000020
